###########
# BUILDER #
###########

# pull official base image
FROM python:3.9.6 as builder

# set work directory
WORKDIR /usr/src/app

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install psycopg2 dependencies. USE FOR ALPINE
# RUN apk update \
#     && apk add postgresql-dev gcc python3-dev musl-dev

# lint
RUN pip install --upgrade pip
RUN pip install flake8==4.0.1
RUN pip install --upgrade pulp
COPY . .
RUN flake8 --ignore=E501,F401 .

# install dependencies
COPY requirements ./requirements
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r ./requirements/requirements.txt


#########
# FINAL #
#########

# pull official base image
FROM python:3.9.6 as runner

RUN mkdir -p /home/app

# create the app user
# RUN addgroup -S app && adduser -S app -G app
RUN addgroup --gid 1001 --system python
RUN adduser --system django --uid 1001

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/backend
RUN mkdir $APP_HOME
RUN mkdir $APP_HOME/staticfiles
WORKDIR $APP_HOME

# install dependencies
# RUN apk update && apk add libpq. ONLY ALPINE
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements/requirements.txt .
RUN pip install --no-cache /wheels/*

# copy production.sh
COPY entrypoints ./entrypoints
# RUN sed -i 's/\r$//g'  $APP_HOME/entrypoints/production.sh FIX THIS LATER
RUN chmod +x  $APP_HOME/entrypoints/production.sh

COPY .env.production ./.env.production

# copy project
COPY . $APP_HOME

# chown all the files to the app user
RUN chown -R django:python $APP_HOME

# change to the django user
USER django

EXPOSE 8000

# run production.sh
ENTRYPOINT ["/home/app/backend/entrypoints/production.sh"]